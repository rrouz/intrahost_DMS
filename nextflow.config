nextflow.enable.dsl = 2

// Global default params, used in configs
params {
    // Input/Reference parameters
    reference = "${projectDir}/reference.fasta"
    outdir = "${launchDir}/outputs"
    
    // Directory structure
    bin_dir = "${projectDir}/bin"
    data_dir = "${projectDir}/data"
    fasta_dir = "${projectDir}/data/fasta"
    variants_dir = "${projectDir}/data/variants"
    
    // Pipeline specific parameters
    segments = ['HA', 'MP', 'NA', 'NP', 'NS', 'PA', 'PB1', 'PB2']
    
    threads = Runtime.runtime.availableProcessors()
    
    // Max resource options
    max_memory = '128.GB'
    max_cpus = 32
    max_time = '240.h'
    
    // Output options
    publish_dir_mode = 'copy'

    // DMS data sources
    dms_file = 'https://raw.githubusercontent.com/dms-vep/Flu_H5_American-Wigeon_South-Carolina_2021-H5N1_DMS/main/results/summaries/phenotypes.csv'
    dms_file_2 = 'https://raw.githubusercontent.com/dms-vep/Flu_H5_American-Wigeon_South-Carolina_2021-H5N1_DMS/main/results/summaries/phenotypes_per_antibody_escape.csv'
    
    // Column headers
    h5_site_header = "sequential_site"
    h3_site_header = "site"
}

// Process-specific configurations
process {
    
    conda = "$projectDir/env.yml"
    
    shell = ['/bin/bash', '-euo', 'pipefail']

    withName: 'INTRAHOST_DMS' {
        memory = { 8.GB * task.attempt }
        maxRetries = 3
    }
}

// Conda settings
conda {
    enabled = true
    createTimeout = '1 h'
    channels = ['conda-forge', 'bioconda']
}

// Executor settings
executor {
    $local {
        cpus = Runtime.runtime.availableProcessors()
        memory = '16 GB'
        queueSize = 8  // Allow more tasks to be queued
    }
}

// Available profiles
profiles {
    debug {
        dumpHashes = true
        process.beforeScript = 'echo $HOSTNAME'
        cleanup = false
        nextflow.enable.configProcessNamesValidation = true
    }
    
    conda {
        conda.enabled = true
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
    }
    
    docker {
        docker {
            enabled = true
            // Use a base image with conda pre-installed
            container = 'continuumio/miniconda3:latest'
            // Auto-mount the host paths
            runOptions = '-u $(id -u):$(id -g) -v ${projectDir}:${projectDir} -v ${params.outdir}:${params.outdir} -v ${launchDir}:${launchDir}'
        }
        // Enable conda inside docker
        conda {
            enabled = true
            createTimeout = '1 h'
            channels = ['conda-forge', 'bioconda']
        }
        // Use the same conda environment file
        process.conda = "$projectDir/env.yml"
        singularity.enabled = false
        podman.enabled = false
    }
    
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
}

// Pipeline manifest
manifest {
    name = 'bjorn-general'
    author = 'Ryin Rouzbehani'
    mainScript = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version = '1.0dev'
}

// Resource management functions
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.max_cpus as int)
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}